package dev._2lstudios.exploitfixer.modules;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;

import dev._2lstudios.exploitfixer.utils.SkullRender;
import dev._2lstudios.exploitfixer.utils.models.SkullOwner;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.*;
import org.bukkit.plugin.Plugin;

import dev._2lstudios.exploitfixer.configuration.IConfiguration;
import dev._2lstudios.exploitfixer.modules.interfaces.Module;
import org.bukkit.potion.PotionType;
import org.bukkit.profile.PlayerProfile;

public class CreativeItemsFixModule extends Module {
	private Plugin plugin;
	private int enchantLimit;
	private int maxStackSize;
	private Collection<String> blacklist;
	private String bypassPermission;
	private boolean useGameProfile;

	// Whitelist already created items
	private boolean whitelistItems;
	private Collection<ItemStack> fixed = new HashSet<>();

	public CreativeItemsFixModule(Plugin plugin) {
		this.plugin = plugin;
		String version = Bukkit.getServer().getClass().getPackage().getName().split("\\.")[3];
		this.useGameProfile = 
				!version.startsWith("v1_17") && !version.startsWith("v1_16")
                && !version.startsWith("v1_15") && !version.startsWith("v1_14")
                && !version.startsWith("v1_13") && !version.startsWith("v1_12")
                && !version.startsWith("v1_11") && !version.startsWith("v1_10")
                && !version.startsWith("v1_9") && !version.startsWith("v1_8");
	}

	public void reload(IConfiguration configYml) {
		String prefix = "creative-items-fix.";

		setEnabled(configYml.getBoolean(prefix + "enabled"));
		setName("Creative Items Fix");
		this.enchantLimit = configYml.getInt(prefix + "enchant-limit");
		this.maxStackSize = configYml.getInt(prefix + "max-stack-size");
		this.blacklist = configYml.getStringList(prefix + "blacklist");
		this.whitelistItems = configYml.getBoolean(prefix + "whitelist-items");
		this.bypassPermission = configYml.getString(prefix + "bypass-permission");
	}

	public int getEnchantLimit() {
		return enchantLimit;
	}

	public int getMaxStackSize() {
		return maxStackSize;
	}

	public Collection<String> getBlacklist() {
		return blacklist;
	}

	public String getBypassPermission() {
        return bypassPermission;
    }

	public void setWhitelisted(ItemStack inventoryItem) {
		fixed.add(inventoryItem);
	}

    public boolean isWhitelisted(ItemStack item) {
        return fixed.contains(item);
    }

	public boolean isWhitelistItems() {
		return whitelistItems;
	}

	public ItemStack fixItem(ItemStack item) {
		Material material = Material.getMaterial(item.getType().name());
		
		if (material == Material.END_PORTAL_FRAME) {
			return new ItemStack(Material.STONE);
		}
		
		if (material == Material.POTION || material == Material.SPLASH_POTION || material == Material.LINGERING_POTION || material == Material.TIPPED_ARROW) {
			ItemMeta meta = item.getItemMeta();

			if (item.hasItemMeta()) {
				if (meta instanceof PotionMeta) {
					PotionMeta potionMeta = (PotionMeta) meta;

					if (potionMeta.getBasePotionData().getType() == PotionType.SLOW_FALLING) {
						return new ItemStack(material, item.getAmount());
					}
				}
			}

			return item;
		}

		ItemMeta newItemMeta = plugin.getServer().getItemFactory().getItemMeta(material);
		short durability = item.getDurability();
		if (item.hasItemMeta()) {
			ItemMeta oldItemMeta = item.getItemMeta();
			String displayName = oldItemMeta.getDisplayName();
			List<String> lore = oldItemMeta.getLore();
			// This applies vanilla levels to enchants
			boolean ignoreLevelRestriction = enchantLimit > 0;

			try {
				if (oldItemMeta.hasCustomModelData()) {
					newItemMeta.setCustomModelData(oldItemMeta.getCustomModelData());
				}
			} catch (NoSuchMethodError ex) {
				// Does not support customModelData
			}

			if (oldItemMeta instanceof EnchantmentStorageMeta) {
				EnchantmentStorageMeta enchantmentStorageMeta = (EnchantmentStorageMeta) oldItemMeta;
				EnchantmentStorageMeta newEnchantmentStorageMeta = (EnchantmentStorageMeta) newItemMeta;

				for (Entry<Enchantment, Integer> entry : enchantmentStorageMeta.getStoredEnchants().entrySet()) {
					Enchantment enchantment = entry.getKey();
					int level = Math.min(entry.getValue(), enchantLimit > 0 ? enchantLimit : 5);

					if (enchantLimit > -1 && level > -1) {
						newEnchantmentStorageMeta.addStoredEnchant(enchantment, level, ignoreLevelRestriction);
					}
				}
			} else {
				for (Entry<Enchantment, Integer> entry : item.getEnchantments().entrySet()) {
					Enchantment enchantment = entry.getKey();
					int level = Math.min(entry.getValue(), enchantLimit > 0 ? enchantLimit : 5);

					if (enchantLimit > -1 && level > -1) {
						newItemMeta.addEnchant(enchantment, level, ignoreLevelRestriction);
					}
				}
			}

			if (newItemMeta instanceof BookMeta) {
				BookMeta oldBookMeta = (BookMeta) oldItemMeta;
				BookMeta newBookMeta = (BookMeta) newItemMeta;

				newBookMeta.setTitle(oldBookMeta.getTitle());
				newBookMeta.setAuthor(oldBookMeta.getAuthor());
				newBookMeta.setPages(oldBookMeta.getPages());
			} else if (newItemMeta instanceof SkullMeta) {
				SkullMeta oldSkullMeta = (SkullMeta) oldItemMeta;
				SkullMeta newSkullMeta = (SkullMeta) newItemMeta;

				if (useGameProfile) {

					PlayerProfile profile = oldSkullMeta.getOwnerProfile();
					if (profile != null) {
						newSkullMeta.setOwnerProfile(oldSkullMeta.getOwnerProfile());
					} else {
						if (item.getType() == Material.PLAYER_HEAD) {
							SkullOwner skull = SkullRender.getOriginalTextureValue(item);
							if (skull.getTexture() != null && skull.getUuid() != null) {
								return SkullRender.renderSkin(new ItemStack(Material.PLAYER_HEAD), skull.getUuid().toString(), skull.getTexture());
							}
						}
					}

				} else {
					newSkullMeta.setOwner(oldSkullMeta.getOwner());
				}
			} else if (newItemMeta instanceof BannerMeta) {
				BannerMeta oldBannerMeta = (BannerMeta) oldItemMeta;
				BannerMeta newBannerMeta = (BannerMeta) newItemMeta;

				newBannerMeta.setBaseColor(oldBannerMeta.getBaseColor());
			} else if (newItemMeta instanceof LeatherArmorMeta) {
				LeatherArmorMeta oldLeatherArmorMeta = (LeatherArmorMeta) oldItemMeta;
				LeatherArmorMeta newLeatherArmorMeta = (LeatherArmorMeta) newItemMeta;

				newLeatherArmorMeta.setColor(oldLeatherArmorMeta.getColor());
			}

			if (displayName != null && displayName.getBytes().length < 128) {
				newItemMeta.setDisplayName(displayName);
			}

			if (lore != null && lore.toString().getBytes().length < 1024) {
				newItemMeta.setLore(lore);
			}
		}

		if (maxStackSize > 0 && item.getAmount() > maxStackSize) {
			item.setAmount(maxStackSize);
		}

		item.setType(material);
		item.setItemMeta(newItemMeta);
		item.setDurability(durability);

		return item;
	}
}
